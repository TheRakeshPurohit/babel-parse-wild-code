// @flow

type ParserOptions = any
type File = any
type Expression = any

interface BabelParser {
  parse(code: string, parserOpts: ParserOptions): File;
  parseExpression(code: string, parserOpts: ParserOptions): Expression;
}

declare export class Parser {
  +babelParser: BabelParser;
  +parserOpts: ParserOptions;

  constructor(babelParser: BabelParser, parserOpts: ParserOptions): void;

  parse(code: string, parserOpts?: ParserOptions): File;
  parseExpression(code: string, parserOpts?: ParserOptions): Expression;

  bindParserOpts(parserOpts: ParserOptions): Parser;
}

declare export function clearCache(): void
declare export function getParserSync(
  file: string,
  options: ParserOptions
): Parser
declare export function getParserAsync(
  file: string,
  options: ParserOptions
): Promise<Parser>
declare export function parseSync(
  file: string,
  options?: { encoding?: string }
): File
declare export function parseAsync(
  file: string,
  options?: { encoding?: string }
): Promise<File>
